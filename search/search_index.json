{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Personal Grade Calculator (PGC) Overview Personal Grade Calculator (PGC) is a web-based tool designed for students who want to plan and track their academic goals without doing manual GPA calculations. With PGC, users can easily find out what grades they need to achieve their target GPA, simply by entering: Desired GPA Current GPA (optional) Current semester course information PGC will automatically calculate the required results and present them in an easy-to-understand format. Development Stack PGC uses Django REST backend for calculating academic grades and storing the results. The service lets clients submit raw subject scores and credits via API endpoints, returns the calculated GPA with its corresponding letter grade, and archives each calculation for later review in the Django admin. Contributing This backend is still evolving. Issues and pull requests that improve code quality, add validation, or expand the API are welcome. Please ensure any submitted changes include relevant documentation and tests where applicable. License PGC is distributed under the terms of the LICENSE file included with the repository.","title":"Home"},{"location":"#personal-grade-calculator-pgc","text":"","title":"Personal Grade Calculator (PGC)"},{"location":"#overview","text":"Personal Grade Calculator (PGC) is a web-based tool designed for students who want to plan and track their academic goals without doing manual GPA calculations. With PGC, users can easily find out what grades they need to achieve their target GPA, simply by entering: Desired GPA Current GPA (optional) Current semester course information PGC will automatically calculate the required results and present them in an easy-to-understand format.","title":"Overview"},{"location":"#development-stack","text":"PGC uses Django REST backend for calculating academic grades and storing the results. The service lets clients submit raw subject scores and credits via API endpoints, returns the calculated GPA with its corresponding letter grade, and archives each calculation for later review in the Django admin.","title":"Development Stack"},{"location":"#contributing","text":"This backend is still evolving. Issues and pull requests that improve code quality, add validation, or expand the API are welcome. Please ensure any submitted changes include relevant documentation and tests where applicable.","title":"Contributing"},{"location":"#license","text":"PGC is distributed under the terms of the LICENSE file included with the repository.","title":"License"},{"location":"mkdocs/","text":"MkDocs Overview PGC uses MkDocs to create documentation webpage from markdown files, to set up the documentation page locally, follow these steps: Setting up MkDocs server (locally) Follow the usage on section 2 (Setup Virtual Environment) first, then you can continue following this guide. Run MkDocs server locally Run this command on the project root directory mkdocs serve This will run the MkDocs server locally, usually at http://127.0.0.1:8000/ or other address as it shown in your shell.","title":"MkDocs"},{"location":"mkdocs/#mkdocs","text":"","title":"MkDocs"},{"location":"mkdocs/#overview","text":"PGC uses MkDocs to create documentation webpage from markdown files, to set up the documentation page locally, follow these steps:","title":"Overview"},{"location":"mkdocs/#setting-up-mkdocs-server-locally","text":"Follow the usage on section 2 (Setup Virtual Environment) first, then you can continue following this guide.","title":"Setting up MkDocs server (locally)"},{"location":"mkdocs/#run-mkdocs-server-locally","text":"Run this command on the project root directory mkdocs serve This will run the MkDocs server locally, usually at http://127.0.0.1:8000/ or other address as it shown in your shell.","title":"Run MkDocs server locally"},{"location":"usage/","text":"Personal Grade Calculator (PGC) Disclaimer The current code for PGC is still under active development. This version represents approximately 50\u201360% of the final project completion. It includes both GET and POST (JSON) APIs, and the system now stores calculation results in the database. 1. Prerequisites Python 3.10+ pip (Python package manager) pipenv (Python virtualenv management tool) 2. Setup Virtual Environment 2.1. Install Pipenv pip install pipenv 2.2. Install dependencies pipenv sync This will automatically install all dependencies required from the Pipfile.lock file. 2.3. Activate the virtual environment pipenv shell This will activate the virtual environment (venv) in the current shell, to check whether you're running commands from the venv, run which pip or which python (Linux/macOS). If the path shown in the output contain .virtualenvs/ followed by the project name, you're good to go. 4. Apply database migrations python manage.py migrate 5. (Optional) Create a superuser for the admin site python manage.py createsuperuser 6. Run Server python manage.py runserver You should see Starting development server at http://127.0.0.1:8000 5. Test Grade Calculation API (GET Version) Open your browser or Postman and visit http://127.0.0.1:8000/api/calculate/?scores=80,90,75&credits=3,3,2 Note: You can replace the numbers in scores and credits with any values you want. Example: scores=65,72,90&credits=3,2,2 Expected Response: { \"GPA\": 82.08, \"Grade\": \"A\" } 6. Test Grade Calculation API (POST JSON Version) This version uses Django REST Framework and accepts JSON input. Open Postman and send: Method: POST URL: http://127.0.0.1:8000/api/calculate/post/ Headers: Content-Type: application/json Body (raw JSON): { \"subjects\": [ { \"name\": \"Math\", \"score\": 82, \"credit\": 3 }, { \"name\": \"ITF\", \"score\": 90, \"credit\": 2 } ] } Expected Response: { \"GPA\": 85.2, \"Grade\": \"A\" } The result will also be saved automatically into the database (GradeResult table). 7. View Stored Results in Admin Panel After testing, open http://127.0.0.1:8000/admin/ Login with your Django superuser account. Then click \u201cGrade results\u201d under the GRADECALC section. You should see a list of previously calculated GPA records, including each result\u2019s GPA, grade, and timestamp. 8. (Optional) Stop the Server Press ^c in your terminal. You have now successfully tested the 50\u201360% Django Backend of PGC!","title":"Usage"},{"location":"usage/#personal-grade-calculator-pgc","text":"","title":"Personal Grade Calculator (PGC)"},{"location":"usage/#disclaimer","text":"The current code for PGC is still under active development. This version represents approximately 50\u201360% of the final project completion. It includes both GET and POST (JSON) APIs, and the system now stores calculation results in the database.","title":"Disclaimer"},{"location":"usage/#1-prerequisites","text":"Python 3.10+ pip (Python package manager) pipenv (Python virtualenv management tool)","title":"1. Prerequisites"},{"location":"usage/#2-setup-virtual-environment","text":"","title":"2. Setup Virtual Environment"},{"location":"usage/#21-install-pipenv","text":"pip install pipenv","title":"2.1. Install Pipenv"},{"location":"usage/#22-install-dependencies","text":"pipenv sync This will automatically install all dependencies required from the Pipfile.lock file.","title":"2.2. Install dependencies"},{"location":"usage/#23-activate-the-virtual-environment","text":"pipenv shell This will activate the virtual environment (venv) in the current shell, to check whether you're running commands from the venv, run which pip or which python (Linux/macOS). If the path shown in the output contain .virtualenvs/ followed by the project name, you're good to go.","title":"2.3. Activate the virtual environment"},{"location":"usage/#4-apply-database-migrations","text":"python manage.py migrate","title":"4. Apply database migrations"},{"location":"usage/#5-optional-create-a-superuser-for-the-admin-site","text":"python manage.py createsuperuser","title":"5. (Optional) Create a superuser for the admin site"},{"location":"usage/#6-run-server","text":"python manage.py runserver You should see Starting development server at http://127.0.0.1:8000","title":"6. Run Server"},{"location":"usage/#5-test-grade-calculation-api-get-version","text":"Open your browser or Postman and visit http://127.0.0.1:8000/api/calculate/?scores=80,90,75&credits=3,3,2 Note: You can replace the numbers in scores and credits with any values you want. Example: scores=65,72,90&credits=3,2,2 Expected Response: { \"GPA\": 82.08, \"Grade\": \"A\" }","title":"5. Test Grade Calculation API (GET Version)"},{"location":"usage/#6-test-grade-calculation-api-post-json-version","text":"This version uses Django REST Framework and accepts JSON input. Open Postman and send: Method: POST URL: http://127.0.0.1:8000/api/calculate/post/ Headers: Content-Type: application/json Body (raw JSON): { \"subjects\": [ { \"name\": \"Math\", \"score\": 82, \"credit\": 3 }, { \"name\": \"ITF\", \"score\": 90, \"credit\": 2 } ] } Expected Response: { \"GPA\": 85.2, \"Grade\": \"A\" } The result will also be saved automatically into the database (GradeResult table).","title":"6. Test Grade Calculation API (POST JSON Version)"},{"location":"usage/#7-view-stored-results-in-admin-panel","text":"After testing, open http://127.0.0.1:8000/admin/ Login with your Django superuser account. Then click \u201cGrade results\u201d under the GRADECALC section. You should see a list of previously calculated GPA records, including each result\u2019s GPA, grade, and timestamp.","title":"7. View Stored Results in Admin Panel"},{"location":"usage/#8-optional-stop-the-server","text":"Press ^c in your terminal. You have now successfully tested the 50\u201360% Django Backend of PGC!","title":"8. (Optional) Stop the Server"}]}